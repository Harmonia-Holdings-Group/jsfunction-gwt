{"name":"JsFunction-GWT","tagline":"Extensive support for passing GWT Java functions to JavaScript APIs that require JavaScript functions","body":"This library used to be part of the [Cesium-GWT](http://richkadel.github.io/cesium-gwt/) repository, \r\nbut it became too useful to other non-Cesium projects (such as my\r\n[OZONE Widget Framework GWT wrappers](https://github.com/richkadel/owf-gwt)),\r\nso I made it an independent project. \r\n\r\nOWF required extensive enhancements to JsFunction, ultimately\r\nforcing me to cover a wide array of cases of function call interactions between GWT and JavaScript.\r\n\r\nA key tenet of JsFunction is to provide support for the strong type checking built into Java,\r\nwhich not only makes the software more reliable, but it also makes development faster by\r\nensuring the code that compiles is more likely to work the first time, and by allowing Integrated\r\nDevelopment Environments (IDEs) like Eclipse or NetBeans to provide automated code completion and\r\nother syntax checking and highlighting. JsFunction makes extensive use of Java Generics to support\r\ndeveloper-provided classes as well as standard JavaScript types and primitives.\r\n\r\nThe library now supports:\r\n\r\n* Passing Java functions to javascript for future invocation (e.g., callbacks)\r\n* Calling JavaScript functions that return results asynchronously (that is, the JavaScript method\r\nwill invoke a Java result handler when the result is available)\r\n* No-argument functions and functions with variable length argument lists \r\n* Optional support for passing non-JavaScript Java Objects as types or return values (which can be \r\nhandy, but use with caution as these objects cannot be serialized,such as with JSON)\r\n\r\nExamples\r\n--------\r\n\r\n### The following callback can be passed into a JavaScript \"onclick\" handler:\r\n\r\n    testWindowOnClick(new NoArgsFunction() {\r\n      public void callback() {\r\n        log(\"Made it\", count++);\r\n      }\r\n    });\r\n    \r\n_To turn the Java callback into an actual JavaScript function, we call JsFunction.create()._\r\n_Typically, we implement a wrapper method to hide that detail from an API user:_\r\n\r\n    private void testWindowOnClick(NoArgsFunction noArgsFunction) {\r\n      nativeWindowOnClick(JsFunction.create(noArgsFunction));\r\n    }\r\n\r\n_Then we invoke the JavaScript from GWT:_\r\n\r\n    private native void nativeWindowOnClick(JsFunction callback) /*-{\r\n      $wnd.onclick = callback\r\n    }-*/;\r\n\r\n\r\n*For more examples,* review the JsFunctionTest class in the \r\n[jsfunction.jsfunctiontest](https://github.com/richkadel/jsfunction-gwt/tree/master/jsfunction-gwt-test/src/main/java/jsfunction/jsfunctiontest)\r\ntest case package.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}